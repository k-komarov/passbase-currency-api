// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ConversionResult struct {
	Timestamp time.Time `json:"timestamp"`
	Rate      float64   `json:"rate"`
	Result    float64   `json:"result"`
}

type Project struct {
	Name      string `json:"name"`
	AccessKey string `json:"accessKey"`
}

type ProjectInput struct {
	Name string `json:"name"`
}

type Symbol string

const (
	SymbolEur Symbol = "EUR"
	SymbolUsd Symbol = "USD"
)

var AllSymbol = []Symbol{
	SymbolEur,
	SymbolUsd,
}

func (e Symbol) IsValid() bool {
	switch e {
	case SymbolEur, SymbolUsd:
		return true
	}
	return false
}

func (e Symbol) String() string {
	return string(e)
}

func (e *Symbol) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Symbol(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Symbol", str)
	}
	return nil
}

func (e Symbol) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
